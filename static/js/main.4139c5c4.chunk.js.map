{"version":3,"sources":["Languages.js","VoiceControls.js","VoiceOutput.js","speechRecognition.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["languages","Languages","_this","this","react_default","a","createElement","style","flex","disabled","props","onChange","e","selectLang","target","value","selectedLang","map","lang","l","i","key","Component","VoiceControls","recording","onClick","onStartClick","onStopClick","color","VoiceOutput","padding","display","height","flexDirection","guess","fontSize","width","defaultValue","output","BrowserSpeechRecognition","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","recognition","continuous","interimResults","onstart","event","console","log","onresult","onspeechend","onerror","error","onaudiostart","onaudioend","onend","onnomatch","onsoundstart","onsoundend","onspeechstart","App","state","handleStart","setState","handleResults","resultIndex","results","length","isFinal","transcript","handleEnd","start","DOMException","stop","bind","_this2","className","src","logo","alt","src_Languages","src_VoiceControls","src_VoiceOutput","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4139c5c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst languages = [\n  ['Afrikaans',       ['af-ZA']],\n  ['Bahasa Indonesia',['id-ID']],\n  ['Bahasa Melayu',   ['ms-MY']],\n  ['Català',          ['ca-ES']],\n  ['Čeština',         ['cs-CZ']],\n  ['Deutsch',         ['de-DE']],\n  ['English',         ['en-AU', 'Australia'],\n                      ['en-CA', 'Canada'],\n                      ['en-IN', 'India'],\n                      ['en-NZ', 'New Zealand'],\n                      ['en-ZA', 'South Africa'],\n                      ['en-GB', 'United Kingdom'],\n                      ['en-US', 'United States']],\n  ['Español',         ['es-AR', 'Argentina'],\n                      ['es-BO', 'Bolivia'],\n                      ['es-CL', 'Chile'],\n                      ['es-CO', 'Colombia'],\n                      ['es-CR', 'Costa Rica'],\n                      ['es-EC', 'Ecuador'],\n                      ['es-SV', 'El Salvador'],\n                      ['es-ES', 'España'],\n                      ['es-US', 'Estados Unidos'],\n                      ['es-GT', 'Guatemala'],\n                      ['es-HN', 'Honduras'],\n                      ['es-MX', 'México'],\n                      ['es-NI', 'Nicaragua'],\n                      ['es-PA', 'Panamá'],\n                      ['es-PY', 'Paraguay'],\n                      ['es-PE', 'Perú'],\n                      ['es-PR', 'Puerto Rico'],\n                      ['es-DO', 'República Dominicana'],\n                      ['es-UY', 'Uruguay'],\n                      ['es-VE', 'Venezuela']],\n  ['Euskara',         ['eu-ES']],\n  ['Français',        ['fr-FR']],\n  ['Galego',          ['gl-ES']],\n  ['Hrvatski',        ['hr_HR']],\n  ['IsiZulu',         ['zu-ZA']],\n  ['Íslenska',        ['is-IS']],\n  ['Italiano',        ['it-IT', 'Italia'],\n                      ['it-CH', 'Svizzera']],\n  ['Magyar',          ['hu-HU']],\n  ['Nederlands',      ['nl-NL']],\n  ['Norsk bokmål',    ['nb-NO']],\n  ['Polski',          ['pl-PL']],\n  ['Português',       ['pt-BR', 'Brasil'],\n                      ['pt-PT', 'Portugal']],\n  ['Română',          ['ro-RO']],\n  ['Slovenčina',      ['sk-SK']],\n  ['Suomi',           ['fi-FI']],\n  ['Svenska',         ['sv-SE']],\n  ['Türkçe',          ['tr-TR']],\n  ['български',       ['bg-BG']],\n  ['Pусский',         ['ru-RU']],\n  ['Српски',          ['sr-RS']],\n  ['한국어',            ['ko-KR']],\n  ['中文',             ['cmn-Hans-CN', '普通话 (中国大陆)'],\n                      ['cmn-Hans-HK', '普通话 (香港)'],\n                      ['cmn-Hant-TW', '中文 (台灣)'],\n                      ['yue-Hant-HK', '粵語 (香港)']],\n  ['日本語',           ['ja-JP']],\n  ['Lingua latīna',   ['la']]\n];\n\nclass Languages extends Component {\n  render() {\n    return (\n      <div style={{ flex: '0 0 auto'}}>\n        <select\n          disabled={ this.props.disabled }\n          onChange={ (e) => this.props.selectLang(e.target.value) }\n          value={ this.props.selectedLang }\n        >\n        {\n          languages.map((lang) => {\n            return lang.map((l, i) => i > 0 && (\n              <option key={ l[0] } value={ l[0] }>{ l[0] }</option>\n            ))\n          })\n        }\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default Languages;\n","import React, { Component } from 'react';\n\nclass VoiceControls extends Component {\n  render() {\n    return (\n      <div style={{ flex: '0 0 auto'}}>\n        <button\n          disabled={ this.props.recording }\n          onClick={ this.props.onStartClick }>Start</button>\n        <button\n          disabled={ !this.props.recording }\n          onClick={ this.props.onStopClick }>Stop</button>\n        {this.props.recording && (\n          <span style={{ color: 'red' }}>recording</span>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default VoiceControls;\n","import React, { Component } from 'react';\n\nclass VoiceOutput extends Component {\n  render() {\n    return (\n      <div style={{ padding: '15px', flex: '1 1 auto', display: 'flex', height: '100%', flexDirection: 'column' }}>\n        <div style={{ color: 'gray', flex: '0 0 auto' }}>{ this.props.guess || '...'}</div>\n        <textarea\n          style={{ fontSize: '24px', width: '100%', flex: '1 1 auto' }}\n          defaultValue={ this.props.output }\n          onChange={ () => false } />\n      </div>\n    );\n  }\n}\n\nexport default VoiceOutput;\n","const BrowserSpeechRecognition = typeof window !== 'undefined' && (\n  window.SpeechRecognition ||\n  window.webkitSpeechRecognition ||\n  window.mozSpeechRecognition ||\n  window.msSpeechRecognition ||\n  window.oSpeechRecognition\n);\nconst recognition = BrowserSpeechRecognition\n ? new BrowserSpeechRecognition()\n : null;\n\nrecognition.continuous = true;\nrecognition.interimResults = true;\n\nrecognition.onstart = (event) => {\n  console.log('SpeechRecognition.onstart');\n }\n\nrecognition.onresult = (event) => {\n  console.log('SpeechRecognition.onresult');\n }\n\nrecognition.onspeechend = () => {\n  console.log('SpeechRecognition.onspeechend');\n }\n\nrecognition.onerror = (event) => {\n  console.log('SpeechRecognition.onerror');\n  console.log(event.error);\n}\n\nrecognition.onaudiostart = (event) => {\n  console.log('SpeechRecognition.onaudiostart');\n}\n\nrecognition.onaudioend = (event) => {\n  console.log('SpeechRecognition.onaudioend');\n}\n\nrecognition.onend = (event) => {\n  console.log('SpeechRecognition.onend');\n }\n\nrecognition.onnomatch = (event) => {\n  console.log('SpeechRecognition.onnomatch');\n }\n\nrecognition.onsoundstart = (event) => {\n  console.log('SpeechRecognition.onsoundstart');\n }\n\nrecognition.onsoundend = (event) => {\n  console.log('SpeechRecognition.onsoundend');\n }\n\nrecognition.onspeechstart = (event) => {\n  console.log('SpeechRecognition.onspeechstart');\n }\n\n export default recognition;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Languages from './Languages'\nimport VoiceControls from './VoiceControls'\nimport VoiceOutput from './VoiceOutput'\nimport recognition from './speechRecognition'\n\nclass App extends Component {\n  state = {\n    recording: false,\n    lang: 'de-DE',\n    output: '',\n    guess: ''\n  }\n  handleStart = (e) => {\n    this.setState({ recording: true })\n  }\n  handleResults = (e) => {\n    let guess = ''\n    let output = this.state.output\n    for (let i = e.resultIndex; i < e.results.length; i++) {\n      if (e.results[i].isFinal) {\n        output = output + ' ' + e.results[i][0].transcript\n      } else {\n        guess = guess + ' ' + e.results[i][0].transcript\n      }\n    }\n    this.setState({ output, guess })\n  }\n  handleEnd = (e) => {\n    this.setState({ recording: false })\n  }\n  onStartClick = () => {\n    try {\n      recognition.start()\n    } catch (DOMException) {\n      // ...\n    }\n  }\n  onStopClick = () => {\n    try {\n      recognition.stop()\n    } catch (DOMException) {\n      // ...\n    }\n  }\n  componentWillMount() {\n    if (recognition) {\n      recognition.onstart = this.handleStart.bind(this)\n      recognition.onresult = this.handleResults.bind(this)\n      recognition.onend = this.handleEnd.bind(this)\n    }\n  }\n  render() {\n    recognition.lang = this.state.lang\n    return (\n      <div className=\"App\">\n        <div style={{ flex: '0 0 auto' }}>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </div>\n        <Languages\n          disabled={ this.state.recording }\n          selectedLang={ this.state.lang }\n          selectLang={ (lang) => this.setState({ lang })} />\n        <VoiceControls\n          recording={ this.state.recording }\n          onStartClick={ this.onStartClick }\n          onStopClick={ this.onStopClick } />\n        <VoiceOutput { ...this.state  } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.dff20d8c.svg\";"],"sourceRoot":""}